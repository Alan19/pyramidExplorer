package pyramidExplorer;

import java.util.Scanner;

public class JaviyAhmedRoom extends CaveRoomPd8 implements Playable{
	
	private static int[][] playerBoard;
	private static int[][] compBoard;
	private static String[][] playerBoardString;
	private static String[][] compBoardString;
	private static boolean checkWin = false;
	private static int[] boatArray = {1,2,3,4,5};
	private static int[] directions = {1,2}; //1 for NORTH/SOUTH and 2 for EAST/WEST
	private static Scanner in;
	

	public JaviyAhmedRoom(String description) {
		super(description);
	}
	
	public void play() {
		playerBoard = new int[10][10];
		compBoard = new int[10][10];
		
		playerBoardString = new String[10][10];
		compBoardString = new String[10][10];
		
		//For player. Initializes the board w/ boats
		setPlayerBoard();
		setCompBoard();
		updateBoards(playerBoard,playerBoardString);
		updateBoards(compBoard,compBoardString);
		print(playerBoardString);
		System.out.println();
		print(compBoardString);
		while(!checkWin) //checkWin method that'll return a boolean
			playGame();
	}
	
	private void playGame() {
		//This is just like the chatbot playing with a computer putting in coordinates to hit or miss
		//Use a helper method to check if it was a hit or miss 
		//Depending on that you redraw the boards accordingly
		in = new Scanner(System.in);
		String input = in.nextLine();
		interpretAction(input);
	}

	private void checkBoard(int[] coordinateChecker) {
		if(compBoard[coordinateChecker[0]][coordinateChecker[1]]==3){
			compBoard[coordinateChecker[0]][coordinateChecker[1]]=2;
		}else{
			compBoard[coordinateChecker[0]][coordinateChecker[1]]=1;
		}
	}

	//0 means nothing 1 means miss 2 means hit and 3 means theres a boat there
	private void updateBoards(int[][] intArray,String[][] stringArray) {
		for(int row = 0;row<stringArray.length;row++){
			for(int col = 0;col<stringArray[0].length;col++){
				if(intArray[row][col] == 0 || intArray[row][col] == 4){
					stringArray[row][col] = "[ ]";
				}else if(intArray[row][col] == 1){
					stringArray[row][col] = "[O]";
				}else if(intArray[row][col] == 2){
					stringArray[row][col] = "[X]";
				}else if(intArray[row][col] == 3){
					if(stringArray.equals(playerBoardString)){
						stringArray[row][col] = "[S]";
					}
					else{
						stringArray[row][col] = "[ ]";
					}
				}
			}
		}
	}

	private void setCompBoard() {
		for(int i=0;i<5;i++){
			int randomDirection = directions[(int)(Math.random()*directions.length)];
			putInRandomDirection(randomDirection,boatArray[i],compBoard);
		}
	}
	
	
	private void setPlayerBoard() {
		for(int i=0;i<5;i++){
			int randomDirection = directions[(int)(Math.random()*directions.length)];
			putInRandomDirection(randomDirection,boatArray[i],playerBoard);
		}
	}

	//This method with stop the for loop if the piece goes off board or hits another piece
	//Use two if conditions and a while loop to do this
	private void putInRandomDirection(int randomDirection, int boatLength, int[][] intArray) {
		int randomOne = 0; 
		int randomTwo = 0;
		while(true){
			randomOne = (int)(Math.random()*10);
			randomTwo = (int)(Math.random()*10);
			if(intArray[randomOne][randomTwo] < 3){
				break;
			}
		}
		if(randomDirection==1){
			int boatLengthVar = boatLength;
			int directionChangeIndex = 1;
			int i=0;
			while(boatLengthVar>0){
				if(randomOne-i>=0 && randomOne-i<intArray[0].length && intArray[randomOne-i][randomTwo]<3){
					intArray[randomOne-i][randomTwo] = 3;
					boatLengthVar--;
					i++;
				}else if(randomOne+directionChangeIndex>0 && randomOne+directionChangeIndex<intArray[0].length && intArray[randomOne+directionChangeIndex][randomTwo]<3){
					intArray[randomOne+directionChangeIndex][randomTwo] = 3;
					directionChangeIndex++;
					boatLengthVar--;
				}
			}
		}
		if(randomDirection==2){
			int boatLengthVar = boatLength;
			int directionChangeIndex = 1;
			int i=0;
			while(boatLengthVar>0){
				if(randomTwo-i>=0 && randomTwo-i<intArray[0].length && intArray[randomOne][randomTwo-i]<3){
					intArray[randomOne][randomTwo-i] = 3;
					boatLengthVar--;
					i++;
				}else if(randomTwo+directionChangeIndex>0 && randomTwo+directionChangeIndex<intArray[0].length && intArray[randomOne][randomTwo+directionChangeIndex]<3){
					intArray[randomOne][randomTwo+directionChangeIndex] = 3;
					directionChangeIndex++;
					boatLengthVar--;
				}else{
					boatLengthVar--;
				}
			}
		}
		restrictAdjacentPanels();
	}
	
	private void restrictAdjacentPanels(){
		for(int row=0; row<playerBoard.length; row++){
			for(int col=0; col<playerBoard[row].length; col++){
				if(playerBoard[row][col] == 3){
					for(int adjRow=row-1; adjRow<row+2; adjRow++){
						for(int adjCol=col-1; adjCol<col+2; adjCol++){
							if(adjRow >= 0 && adjCol >= 0 && adjRow < playerBoard.length && adjCol < playerBoard[0].length && playerBoard[adjRow][adjCol] <3){
								playerBoard[adjRow][adjCol] = 4;
							}
						}
					}
				}
			}
		}
	}

	public void enter(){
		super.enter();
		System.out.println(" ");
	}
	
	public void interpretAction(String input) {
		while(!isValid(input)){
			CaveExplorer.print("Please enter a valid coordinate.");
			input = CaveExplorer.in.nextLine().toLowerCase();
		}
		String[] keys = {"w", "d", "s", "a"};
		int indexFound = -1;
		for (int i = 0; i < keys.length; i++) {
			if (keys[i].equals(input)) {
				indexFound = i;
				break;
			}
		}
		checkBoard(getCoordinates(input));
	}

	private int[] getCoordinates(String input) {
		String[] keysAlpha = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
		String[] keysNum = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		int[] coordinate = new int[2];
		for(int row = 0;row<keysAlpha.length;row++){
			if(input.substring(0,1).toLowerCase().equals(keysAlpha[row]))coordinate[0]=row;
			for(int col = 0;col<keysNum.length;col++){
				if(input.substring(1).equals(keysNum[col]))coordinate[1]=col;
			}
		}
		return coordinate;
	}

	public static boolean isValid(String input) {
		String[] keysAlpha = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
		String[] keysNum = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		for (String key : keysAlpha) {
			if(input.substring(0,1).toLowerCase().equals(key)){
				for(String keyNum : keysNum){
					if(input.substring(1).equals(keyNum)) return true;
				}
			}
		}
		return false;
	}
	

	private void print(Object[][] arr){
		for(Object[] row:arr){
			for(Object col:row){
				System.out.print(col);
			}
			System.out.println();
		}
	}
	//Ai Class
	//getCoordinates
	//isValid
	//interpretAction
	//checkBoard
}
