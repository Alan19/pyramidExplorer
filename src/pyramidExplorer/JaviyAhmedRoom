package pyramidExplorer;

import java.util.Arrays;

public class JaviyAhmedRoom extends CaveRoomPd8 implements Playable{
	
	private int[][] playerBoard;
	private int[][] compBoard;
	private String[][] playerBoardString;
	private String[][] compBoardString;
	private boolean checkWin = false;
	

	public JaviyAhmedRoom(String description) {
		super(description);
	}
	
	public void play() {
		setBasicBoards();
		setBasicBoards();
		print(playerBoardString);
		while(!checkWin) //checkWin method that'll return a boolean
			playGame();
	}
	
	private void playGame() {
		//This is just like the chatbot playing with a computer putting in coordinates to hit or miss
		//Use a helper method to check if it was a hit or miss 
		//Depending on that you redraw the boards accordingly
	}

	//0 means nothing 1 means miss 2 means hit and 3 means theres a boat there
	private void setBasicBoards() {
		int[] boatArray = {2,3,4,5,6};
		int[] directions = {1,2,3,4};
		playerBoard = new int[10][10];
		compBoard = new int[10][10];
		
		playerBoardString = new String[10][10];
		compBoardString = new String[10][10];
		
//		for(int a = 0;a<playerBoardString[0].length;a++){
//			playerBoardString[0][a] = "A"+(a+1)+".";
//		}
		for(int row = 0;row<playerBoardString.length;row++){
			for(int col = 0;col<playerBoardString[0].length;col++){
				if(playerBoard[row][col] == 0){
					playerBoardString[row][col] = "[ ]";
				}else if(playerBoard[row][col] == 1){
					playerBoardString[row][col] = "[O]";
				}else if(playerBoard[row][col] == 2){
					playerBoardString[row][col] = "[X]";
				}else{
					playerBoardString[row][col] = "   ";
				}
			}
		}
		
		
		//This is just for the player
		setPlayerBoard(directions,boatArray);
		setCompBoard(directions,boatArray);
		
	}

	
	



private void setCompBoard(int[] directions, int[] boatArray) {
	for(int i=0;i<5;i++){
		int randomDirection = directions[(int)(Math.random()*3+1)];
		putInRandomDirection(playerBoard,randomDirection,boatArray[i]);
	}
}


private void setPlayerBoard(int[] directions,int[] boatArray) {
	for(int i=0;i<5;i++){
		int randomDirection = directions[(int)(Math.random()*3+1)];
		putInRandomDirection(playerBoard,randomDirection,boatArray[i]);
	}
}


private void putInRandomDirection(int[][] playerBoardString, int randomDirection, int boatLength) {
	boatLength--;
	int randomOne = (int)(Math.random()*9+1);
	int randomTwo = (int)(Math.random()*9+1);
	playerBoardString[randomOne][randomTwo] = 3;
	if(randomDirection==1){
		//NORTH
		for(int i=0;i<boatLength;i++){
			//This method with stop the for loop if the piece goes off board or hits another piece
			//Use two if conditions and a while loop to do this
			int boatLength1 = boatLength;
			while(boatLength>0){
				if(randomOne-i>0 && randomOne-i<playerBoard[0].length && playerBoard[randomOne-i][randomTwo] !=3){
					playerBoard[randomOne-i][randomTwo] = 3;
					boatLength1--;
				}
			}
		}
	}//cut out code
}
	
	public void enter(){
		super.enter();
		System.out.println(" ");
	}
	
	public void interpretAction(String input) {
		input = input.toLowerCase();
		while(!isValid(input)){
			CaveExplorer.print("Please enter 'w', 'a', 's', or 'd'.");
			input = CaveExplorer.in.nextLine().toLowerCase();
		}
		String[] keys = {"w", "d", "s", "a"};
		int indexFound = -1;
		for (int i = 0; i < keys.length; i++) {
			if (keys[i].equals(input)) {
				indexFound = i;
				break;
			}
		}
//		if(borderingRooms[indexFound] != null && doors[indexFound] != null && doors[indexFound].isOpen()){
//			CaveExplorer.currentRoom.leave();
//			CaveExplorer.currentRoom = borderingRooms[indexFound];
//			CaveExplorer.currentRoom.enter();
//			CaveExplorer.inventory.updateMap();
//		}
	}

	public static boolean isValid(String input) {
		String[] keys = {"w", "d", "s", "a"};
		for (String key : keys) {
			if(input.equals(key)) return true;
		}
		return false;
	}
	

	private void print(Object[][] arr){
		for(Object[] row:arr){
			for(Object col:row){
				System.out.print(col);
			}
			System.out.println();
		}
	}
}
