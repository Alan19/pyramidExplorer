package pyramidExplorer;

import java.util.Scanner;

public class JaviyAhmedRoom extends CaveRoomPd8 implements Playable{
	
	public static final String[] SEQUENCE_1 = {
			"<A silhouette of a person passes by you in this pyramid ",
			"there's an ominous feeling that went down your spine.>",
			"A deep voice speaks to you ",
			"You're not around here please follow the shadows", 
			"It will lead to your freedom."
		};
	public static final String[] SEQUENCE_2 = {
			"The silhouette disappears into the wall and NOW ALL THE DOORS SHUT DOWN ON YOU",
			"WHO ARE YOU, why are you here?.",
			"I am the King of Games everyone calls me The Pharaoh.",
			"Please brave challenger duel and deafeat my enemy in the Shadow Realm",
			"Will you please duel in my place?",
			"If you win, I will show you the way out."
	};
		public static final String[] SEQUENCE_3 = {
				"You are in a foggy enviroment ",
				"All your monsters must suvive and you must destory all of theres",
				"Please pick coordinates and win this duel!"
		};
	private static int[][] playerBoard;
	private static int[][] compBoard;
	private static String[][] playerBoardString;
	private static String[][] compBoardString;
	private static boolean checkWin = false;
	private static boolean checkLose = true;
	private static int[] boatArray = {1,2,3,4,5};
	private static int[] directions = {1,2}; //1 for NORTH/SOUTH and 2 for EAST/WEST
	private static Scanner in;
	private static boolean reveal = false;
	private static boolean playerHit;
	private static boolean compHit;
	

	public JaviyAhmedRoom(String description) {
		super(description);
	}
	
	public void play() {
		readSequence(SEQUENCE_1);
		System.out.println("Would you like to follow the silhouette?");
		while(CaveExplorer.in.nextLine().toLowerCase().indexOf("yes") < 0){
			CaveExplorer.print("IF YOU DON'T FOLLOW HIM YOU MAY BE TRAPPED IN THIS MAZE FOREVER");
		}
		readSequence(SEQUENCE_2);
		System.out.println("Come on! Tell me you like to duel.");
		while(CaveExplorer.in.nextLine().toLowerCase().indexOf("yes") < 0){
			CaveExplorer.print("C'mon! You know you should duel! Say yes!");
		}
		readSequence(SEQUENCE_3);
		playerBoard = new int[10][10];
		compBoard = new int[10][10];
		
		playerBoardString = new String[10][10];
		compBoardString = new String[10][10];
		
		//For player. Initializes the board w/ boats
		setPlayerBoard();
		setCompBoard();
		updateBoards(playerBoard,playerBoardString);
		updateBoards(compBoard,compBoardString);
		print(playerBoardString);
		System.out.println();
		print(compBoardString);
		while(!checkWin){
			playGame();			
		}
		if(checkLose){
			System.out.println("You LOST, now you will never leave!Be banished to the Shodow Realm");
		}else {
			System.out.println("You Won, sorry I lied I don't know my way out.");
			System.out.println("I've been trapped here for 10,000 years YOU ARE SO SCREWED!");
		}
	}
	
	private void CheckWin(int[][] intArray,int[][] intArrayTwo) {
		int amountOfShips = 0;
		int yourBoard = 0;
		for(int row = 0;row<intArray.length;row++){
			for(int col = 0;col<intArray[0].length;col++){
				if(intArray[row][col] == 3){
					amountOfShips++;
				}
			}
		}
		for(int row = 0;row<intArrayTwo.length;row++){
			for(int col = 0;col<intArrayTwo[0].length;col++){
				if(intArrayTwo[row][col] == 3){
					yourBoard++;
				}
			}
		}
		if(yourBoard==15){
			checkLose = true;
		}else if(amountOfShips>0){
			checkWin = false;
		}else{
			checkWin = true;
		}
	}

	private void playGame() {
		//This is just like the chatbot playing with a computer putting in coordinates to hit or miss
		//Use a helper method to check if it was a hit or miss 
		//Depending on that you redraw the boards accordingly
		in = new Scanner(System.in);
		String input = in.nextLine();
		playerHit = true;
		compHit = true;
		while(playerHit){
			interpretAction(input);
			updateBoards(compBoard,compBoardString);
			CheckWin(compBoard,playerBoard);
		}
		print(compBoardString);
		while(compHit){
			interpretAction(input);
			updateBoards(compBoard,playerBoardString);
			CheckWin(compBoard,compBoard);
		}
		print(playerBoardString);
	}

	private void checkBoard(int[] coordinateChecker) {
		if(compBoard[coordinateChecker[0]][coordinateChecker[1]]==1 || compBoard[coordinateChecker[0]][coordinateChecker[1]]==2){
			System.out.println("You have already used this coordinate please select a new one.");
		}else if(compBoard[coordinateChecker[0]][coordinateChecker[1]]==3){
			compBoard[coordinateChecker[0]][coordinateChecker[1]]=2;
		}else{
			compBoard[coordinateChecker[0]][coordinateChecker[1]]=1;
			playerHit = false;
		}
	}

	//0 means nothing 1 means miss 2 means hit and 3 means theres a boat there
	private void updateBoards(int[][] intArray,String[][] stringArray) {
		for(int row = 0;row<stringArray.length;row++){
			for(int col = 0;col<stringArray[0].length;col++){
				if(intArray[row][col] == 0 || intArray[row][col] == 4){
					stringArray[row][col] = "[ ]";
				}else if(intArray[row][col] == 1){
					stringArray[row][col] = "[O]";
					System.out.println("You missed");
				}else if(intArray[row][col] == 2){
					stringArray[row][col] = "[X]";
					System.out.println("You hit");
				}else{// if(intArray[row][col] == 3){
					if(stringArray.equals(playerBoardString)){
						stringArray[row][col] = "[S]";
					}else if(reveal==true){
						stringArray[row][col] = "[S]";
					}
					else{
						stringArray[row][col] = "[ ]";
					}
				}
			}
		}
	}

	private void setCompBoard() {
		for(int i=0;i<5;i++){
			int randomDirection = directions[(int)(Math.random()*directions.length)];
			putInRandomDirection(randomDirection,boatArray[i],compBoard);
		}
	}
	
	
	private void setPlayerBoard() {
		for(int i=0;i<5;i++){
			int randomDirection = directions[(int)(Math.random()*directions.length)];
			putInRandomDirection(randomDirection,boatArray[i],playerBoard);
		}
	}

	//This method with stop the for loop if the piece goes off board or hits another piece
	//Use two if conditions and a while loop to do this
	private void putInRandomDirection(int randomDirection, int boatLength, int[][] intArray) {
		int randomOne = 0; 
		int randomTwo = 0;
		while(true){
			randomOne = (int)(Math.random()*10);
			randomTwo = (int)(Math.random()*10);
			if(intArray[randomOne][randomTwo] < 3){
				break;
			}
		}
		if(randomDirection==1){
			int boatLengthVar = boatLength;
			int directionChangeIndex = 1;
			int i=0;
			while(boatLengthVar>0){
				if(randomOne-i>=0 && randomOne-i<intArray[0].length && intArray[randomOne-i][randomTwo]<3){
					intArray[randomOne-i][randomTwo] = 3;
					boatLengthVar--;
					i++;
				}else if(randomOne+directionChangeIndex>0 && randomOne+directionChangeIndex<intArray[0].length && intArray[randomOne+directionChangeIndex][randomTwo]<3){
					intArray[randomOne+directionChangeIndex][randomTwo] = 3;
					directionChangeIndex++;
					boatLengthVar--;
				}else{
					boatLengthVar--;
				}
			}
		}
		if(randomDirection==2){
			int boatLengthVar = boatLength;
			int directionChangeIndex = 1;
			int i=0;
			while(boatLengthVar>0){
				if(randomTwo-i>=0 && randomTwo-i<intArray[0].length && intArray[randomOne][randomTwo-i]<3){
					intArray[randomOne][randomTwo-i] = 3;
					boatLengthVar--;
					i++;
				}else if(randomTwo+directionChangeIndex>0 && randomTwo+directionChangeIndex<intArray[0].length && intArray[randomOne][randomTwo+directionChangeIndex]<3){
					intArray[randomOne][randomTwo+directionChangeIndex] = 3;
					directionChangeIndex++;
					boatLengthVar--;
				}else{
					boatLengthVar--;
				}
			}
		}
		restrictAdjacentPanels(intArray);
	}
	
	private void restrictAdjacentPanels(int[][] intArray){
		for(int row=0; row<intArray.length; row++){
			for(int col=0; col<intArray[row].length; col++){
				if(intArray[row][col] == 3){
					for(int adjRow=row-1; adjRow<row+2; adjRow++){
						for(int adjCol=col-1; adjCol<col+2; adjCol++){
							if(adjRow >= 0 && adjCol >= 0 && adjRow < intArray.length && adjCol < intArray[0].length && intArray[adjRow][adjCol] <3){
								intArray[adjRow][adjCol] = 4;
							}
						}
					}
				}
			}
		}
	}

	public void enter(){
		super.enter();
		System.out.println(" ");
	}
	
	public void interpretAction(String input) {
		//System.out.println(isValid(input));
		if(input.toLowerCase().equals("swords of revealing light")){
			reveal = true;
			playerHit = false;
		}else{
		while(!isValid(input)){
			CaveExplorer.print("Please enter a valid coordinate.");
			input = CaveExplorer.in.nextLine();
		}
		
		checkBoard(getCoordinates(input));
		}
	}

	private int[] getCoordinates(String input) {
		String[] keysAlpha = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
		String[] keysNum = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		int[] coordinate = new int[2];
		for(int row = 0;row<keysAlpha.length;row++){
			if(input.substring(0,1).toLowerCase().equals(keysAlpha[row]))coordinate[0]=row;
			for(int col = 0;col<keysNum.length;col++){
				if(input.substring(1).equals(keysNum[col]))coordinate[1]=col;
			}
		}
//		System.out.println(coordinate[0]);
//		System.out.println(coordinate[1]);
		return coordinate;
	}

	public static boolean isValid(String input) {
		String[] keysAlpha = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"};
		String[] keysNum = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		for (String key : keysAlpha) {
			if(input.substring(0,1).toLowerCase().equals(key)||input.toLowerCase().equals("swords of revealing light")){
				for(String keyNum : keysNum){
					if(input.substring(1).equals(keyNum)||input.toLowerCase().equals("swords of revealing light")) return true;
				}
			}
		}
		return false;
	}
	

	private void print(Object[][] arr){
		for(Object[] row:arr){
			for(Object col:row){
				System.out.print(col);
			}
			System.out.println();
		}
	}
	
	public static void readSequence(String[] seq) {
		for(String s : seq){
			CaveExplorer.print(s);
			
		}
		CaveExplorer.print("--- press enter ---");
		
	}
	//Ai Class
	//getCoordinates
	//isValid
	//interpretAction
	//checkBoard
}
